<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Bitbom Blog</title>
        <link>https://bitbom.dev/blog/</link>
        <description>Bitbom Blog</description>
        <lastBuildDate>Fri, 25 Oct 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Isolating and Fixing Vulnerabilities in an Air-Gapped Environment]]></title>
            <link>https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/</link>
            <guid>https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/</guid>
            <pubDate>Fri, 25 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[How we isolated and fixed vulnerabilities in an air-gapped environment]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="caged-floating-island" src="https://bitbom.dev/assets/images/air-gapped-vulnerabilities-fab5fc1b21616c36bf08cc5fd16cc946.png" width="1456" height="816" class="img_ev3q"></p>
<p>Isolating and Identifying Critical Vulnerabilities in under 5 minutes (coffee break ;))</p>
<hr>
<p><em>TL;DR</em></p>
<p><em>Minefield simplifies the process of discovering and addressing vulnerabilities across complex software projects by using fast, bitwise queries and Roaring Bitmaps to analyze Software Bill of Materials (SBOMs) in air-gapped environments. With straightforward commands, you can quickly identify affected packages, assess their impact, prioritize fixes for critical components, and systematically eliminate risks. Soon, an integrated Language Learning Model (LLM) will make writing these queries even easier, enabling more intuitive and efficient security management without compromising on safety.</em></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a href="https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/#introduction" class="hash-link" aria-label="Direct link to Introduction" title="Direct link to Introduction">​</a></h2>
<p>Imagine you're managing a complex software project with thousands of dependencies. One day, researchers discover a critical vulnerability in a popular library. How quickly can you determine if your project is affected? How do you identify all the dependencies that rely on this vulnerable library? Enter <a href="https://github.com/bitbomdev/minefield" target="_blank" rel="noopener noreferrer">Minefield</a> an air-gapped solution for analyzing Software Bill of Materials (SBOMs). By leveraging the power of <a href="https://github.com/RoaringBitmap/roaring" target="_blank" rel="noopener noreferrer">Roaring Bitmaps</a> and bitwise queries, Minefield enables you to perform lightning-fast analyses, uncovering deep insights into your software dependencies with remarkable efficiency.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-foundation-instantaneous-queries">The Foundation: Instantaneous Queries<a href="https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/#the-foundation-instantaneous-queries" class="hash-link" aria-label="Direct link to The Foundation: Instantaneous Queries" title="Direct link to The Foundation: Instantaneous Queries">​</a></h2>
<p>Minefield's core capabilities are its basic queries for dependencies and dependents. Thanks to our <a href="https://github.com/bitbomdev/minefield/blob/main/pkg/graph/cache.go#L10" target="_blank" rel="noopener noreferrer">cache</a>, these operations are <code>O(1)</code> or instantaneous. This efficiency enables more complex analyses. It lets you quickly navigate vast dependency graphs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="bitwise-operations-combining-queries-for-greater-insight">Bitwise Operations: Combining Queries for Greater Insight<a href="https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/#bitwise-operations-combining-queries-for-greater-insight" class="hash-link" aria-label="Direct link to Bitwise Operations: Combining Queries for Greater Insight" title="Direct link to Bitwise Operations: Combining Queries for Greater Insight">​</a></h2>
<p>The real magic happens when we combine these basic queries using bitwise operations. Since the result of every query is a roaring bitmap, we can perform operations like <code>AND</code>, <code>OR</code>, and <code>XOR</code> on the results of multiple queries. This approach opens up many possibilities for analyzing software dependencies. It is especially useful for finding and fixing vulnerabilities.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-story-of-finding-and-eliminating-vulnerabilities">A Story of Finding and Eliminating Vulnerabilities<a href="https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/#a-story-of-finding-and-eliminating-vulnerabilities" class="hash-link" aria-label="Direct link to A Story of Finding and Eliminating Vulnerabilities" title="Direct link to A Story of Finding and Eliminating Vulnerabilities">​</a></h2>
<p>Let's walk through a real-world scenario:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-vulnerability-alert">The Vulnerability Alert<a href="https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/#the-vulnerability-alert" class="hash-link" aria-label="Direct link to The Vulnerability Alert" title="Direct link to The Vulnerability Alert">​</a></h3>
<p>Your security team alerts you to a critical vulnerability <code>GHSA-1234</code>. You need to determine:</p>
<ul>
<li>
<p>How does the vulnerability affect your project?</p>
</li>
<li>
<p>How deeply ingrained is the vulnerable library in your dependency tree?</p>
</li>
<li>
<p>How can you isolate and address the vulnerability quickly?</p>
</li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="step-1-identifying-affected-dependencies">Step 1: Identifying Affected Dependencies<a href="https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/#step-1-identifying-affected-dependencies" class="hash-link" aria-label="Direct link to Step 1: Identifying Affected Dependencies" title="Direct link to Step 1: Identifying Affected Dependencies">​</a></h4>
<p>Our first concern is to find all the packages affected by this vulnerability.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">minefield query custom "dependents library GHSA-1234"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This query returns all packages in your graph that depend on <code>GHSA-1234</code>, directly or transitively.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="step-2-assessing-the-impact">Step 2: Assessing the Impact<a href="https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/#step-2-assessing-the-impact" class="hash-link" aria-label="Direct link to Step 2: Assessing the Impact" title="Direct link to Step 2: Assessing the Impact">​</a></h4>
<p>This is a critical vulnerability. Before solving all problems, we want to find what parts of your main critical packages are affected. For example, assume you own <code>Kubernetes</code> which is your critical project. You want to know which <code>Kubernetes</code> dependencies are affected by this vulnerability. This is your first priority.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">minefield query custom "dependencies library pkg:kubernetes and dependents library GHSA-1234"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This bitwise <code>AND</code> narrows the list to only those <code>Kubernetes</code> dependencies that rely on vulnerable libraries. This gives you a basic understanding of how severe this problem is for <code>Kubernetes</code>. This query will give you a list of dependencies for <code>Kubernetes</code> that are affected by this vulnerability.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="step-3-prioritizing-the-fix">Step 3: Prioritizing the Fix<a href="https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/#step-3-prioritizing-the-fix" class="hash-link" aria-label="Direct link to Step 3: Prioritizing the Fix" title="Direct link to Step 3: Prioritizing the Fix">​</a></h4>
<p>Now that we have this list, we need to inform the engineering team which packages to focus on. Remember, we first want our main package, <code>Kubernetes</code>, to be secure.</p>
<p>Let's create a ranked list for the whole graph. It should rank packages by the number of their dependencies, affected by the vulnerability, that are dependencies of <code>Kubernetes</code>.</p>
<p>This is a mouthful, so let's break it down.</p>
<p>Let's say we have packages <code>A</code>, <code>B</code>, and <code>C</code>.</p>
<ul>
<li>
<p><code>Kubernetes</code> depends on <code>A</code> and <code>C</code>.</p>
</li>
<li>
<p><code>A</code> depends on <code>B</code> and <code>C</code>.</p>
</li>
<li>
<p>Both <code>A</code> and <code>B</code> are affected by the vulnerability.</p>
</li>
</ul>
<p>So, package <code>A</code> is the one vulnerable dependency and <code>Kubernetes</code> dependency.</p>
<p><a href="https://mermaid.live/edit#pako:eNplkk1vwjAMhv-KFcSt3WFIkxakSbS9TUiTxmmUQ2hcEpEmVT7GJsR_XyAFus0n-3ntyHZ8JI3hSCjZWdYLWBXzWkM0F7aJLJnUb6zZsx0m5WyL9WvYotXo0W0SRs2Ts4A8f4FiPRTBYjPm5Y2XAy8uvLrx4hcvh4BS-hmURsu2amik-sMSbRRzrsIW7hK0Uik6aZ-fMuet2SOdzGazwc8PkntBH_uv-fWJ6RRWQjrgksUddOCEOTjwAsGiYl4a7YTsHb1l53BfB3Ds4y4cGB1HZppD-TBKXIz14r9eGC-GuqhaHI3xQDLSoe2Y5PG_jueimsSuOqwJjS7HlgXla1LrU0xlwZv3b90Q6m3AjISeM49VmukKe6Y_jIlhy5SLMXLpjV2mk7hcRkasCTuRCk4_y-GvSw" target="_blank" rel="noopener noreferrer"><img decoding="async" loading="lazy" src="https://mermaid.ink/img/pako:eNplkk1vwjAMhv-KFcSt3WFIkxakSbS9TUiTxmmUQ2hcEpEmVT7GJsR_XyAFus0n-3ntyHZ8JI3hSCjZWdYLWBXzWkM0F7aJLJnUb6zZsx0m5WyL9WvYotXo0W0SRs2Ts4A8f4FiPRTBYjPm5Y2XAy8uvLrx4hcvh4BS-hmURsu2amik-sMSbRRzrsIW7hK0Uik6aZ-fMuet2SOdzGazwc8PkntBH_uv-fWJ6RRWQjrgksUddOCEOTjwAsGiYl4a7YTsHb1l53BfB3Ds4y4cGB1HZppD-TBKXIz14r9eGC-GuqhaHI3xQDLSoe2Y5PG_jueimsSuOqwJjS7HlgXla1LrU0xlwZv3b90Q6m3AjISeM49VmukKe6Y_jIlhy5SLMXLpjV2mk7hcRkasCTuRCk4_y-GvSw?type=png" alt="" class="img_ev3q"></a></p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">minefield leaderboard custom "dependencies library and (dependents library GHSA-1234 and dependencies library pkg:kubernetes)"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This command shows a leaderboard of affected packages. It helps you prioritize which parts to fix first.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-4-fixing-the-rest-of-the-graph">Step 4: Fixing the rest of the graph<a href="https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/#step-4-fixing-the-rest-of-the-graph" class="hash-link" aria-label="Direct link to Step 4: Fixing the rest of the graph" title="Direct link to Step 4: Fixing the rest of the graph">​</a></h3>
<p>We fixed Kubernetes. Now, we need to find what to fix next. We want to run the previous query for all packages that are not Kubernetes dependencies.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">minefield leaderboard custom "dependencies library and ((dependents library GHSA-1234 xor dependencies library pkg:Kubernetes ) and dependents library GHSA-1234)"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Ok, so this is a little more complicated but still very close to the previous query, so let's break down the parenthesis.</p>
<p><code>((dependents library GHSA-1234 xor dependencies library pkg:Kubernetes ) and dependents library GHSA-1234)</code></p>
<p>First, <code>(dependents library GHSA-1234 xor dependencies library pkg:Kubernetes )</code> finds the unique elements of both queries. It means all the vulnerable libraries that are not dependencies of <code>Kubernetes</code> are in this. It also includes all dependencies of <code>Kubernetes</code> that are not affected by the vulnerability.</p>
<p>The second part, <code>and dependents library GHSA-1234</code>, isolates just the vulnerable packages from the first query. It throws away anything that was not a vulnerable library.</p>
<p>At the we are end ranking all the packages in the graph by the number of dependencies that are affected by the vulnerabiltiy, that are not dependencies of <code>Kubernentes</code>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-up-coming">What’s Up Coming<a href="https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/#whats-up-coming" class="hash-link" aria-label="Direct link to What’s Up Coming" title="Direct link to What’s Up Coming">​</a></h2>
<p>While these queries are powerful, writing them repeatedly can become tedious. That’s why we are developing a Large Language Model (LLM) to make this process smoother. Our goal is to simplify query creation, allowing you to interact with Minefield in a more natural, conversational way. This LLM will understand your needs and generate the necessary commands, saving you time and reducing the complexity of crafting intricate queries.</p>
<p>Moreover, we plan to deploy this LLM in an air-gapped environment, ensuring that your data and analysis remain secure and isolated. This approach will maintain the high level of security Minefield is known for while enhancing its usability. Stay tuned for updates as we work towards making Minefield even more intuitive and efficient!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://bitbom.dev/blog/isolating-and-fixing-vulnerabilities-in-an-air-gapped-environment/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In today's fast-paced development world, we must quickly find and fix vulnerabilities. Minefield's bitwise queries empower you to perform complex analyses with ease, enabling you to:</p>
<ul>
<li>
<p>Rapidly identify affected components when a vulnerability is discovered.</p>
</li>
<li>
<p>Analyze and compare different versions of your projects.</p>
</li>
<li>
<p>Perform intricate multi-step analyses for deep insights.</p>
</li>
</ul>
<p>Minefield uses fast, roaring bitmaps and flexible bitwise ops. It opens new ways to understand and manage software dependencies in air-gapped environments. Whether you're safeguarding your projects against vulnerabilities or optimizing your dependency graph, Minefield equips you with the tools you need to maintain a robust and secure software ecosystem.</p>
<hr>
<p>Ready to unleash the power of Minefield in your projects? Our docs explain how bitwise queries can improve your security and dependency management.</p>]]></content:encoded>
            <category>air-gapped</category>
            <category>vulnerabilities</category>
        </item>
        <item>
            <title><![CDATA[How Minefield Enables Air-Gapped SBOM Vulnerability Graphing Like Git's Disconnected Mode]]></title>
            <link>https://bitbom.dev/blog/Air-Gapped-Vulnerability/</link>
            <guid>https://bitbom.dev/blog/Air-Gapped-Vulnerability/</guid>
            <pubDate>Sat, 12 Oct 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[How Minefield Graphed Vulnerabilities in an Air-Gapped Environment]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="caged-floating-island" src="https://bitbom.dev/assets/images/caged-floating-island-e83089e74da06785a8df4d35f1c76e09.png" width="1456" height="816" class="img_ev3q"></p>
<p>Graphing vulnerabilities in an air-gapped environment is considered impossible, and we did it. Here's how.</p>
<hr>
<p><em><strong>TL;DR</strong>: Inspired by Git's offline capabilities, Minefield's air-gapped SBOM vulnerability management tool allows secure, offline vulnerability ingestion and fast graphing. This enables users to integrate public and custom vulnerabilities in isolated environments, ensuring complete data control and enhanced security.</em></p>
<p>At Minefield, we took inspiration from Git's ability to function offline to create a fast, lightweight tool that operates effectively in an air-gapped environment. Minefield does not require internet access to function, which makes it ideal for secure, isolated settings such as critical infrastructure or sensitive corporate environments.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-philosophy-behind-air-gapped-design">The Philosophy Behind Air-Gapped Design<a href="https://bitbom.dev/blog/Air-Gapped-Vulnerability/#the-philosophy-behind-air-gapped-design" class="hash-link" aria-label="Direct link to The Philosophy Behind Air-Gapped Design" title="Direct link to The Philosophy Behind Air-Gapped Design">​</a></h2>
<p><a href="https://github.com/bitbomdev/minefield" target="_blank" rel="noopener noreferrer">Minefield's</a> air-gapped approach addresses complex engineering challenges by reducing dependencies on external services. Focusing on simplicity, reliability, and control over the system ensures consistent and reliable results, particularly during testing.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-vulnerability-ingestion-works">How Vulnerability Ingestion Works<a href="https://bitbom.dev/blog/Air-Gapped-Vulnerability/#how-vulnerability-ingestion-works" class="hash-link" aria-label="Direct link to How Vulnerability Ingestion Works" title="Direct link to How Vulnerability Ingestion Works">​</a></h2>
<p>How do we handle vulnerability ingestion without relying on external network resources or shared vulnerability databases?</p>
<p>Minefield's speed and efficiency come from using Roaring Bitmaps and a direct node-to-node model. These approaches ensure efficient data storage and rapid query execution, making vulnerability graphing in air-gapped environments fast and reliable.</p>
<p><strong>Data Structure and Algorithm:</strong> Minefield uses Roaring Bitmaps to store relationship data, which keeps the graph lightweight and enables fast bitwise operations for queries. The direct node-to-node model simplifies graph maintenance, and caching common queries ensures O(1) lookup times, making the system highly efficient for handling vulnerability data in an air-gapped environment.</p>
<p><strong>Direct Node-to-Node Model:</strong> Instead of the traditional node-edge-node graph structure, Minefield adopts a direct node-to-node model. This reduces the complexity of maintaining explicit edges, making the graph lightweight and easier to manage.</p>
<p><strong>Caching with Pre-Computed Queries:</strong> Minefield caches dependents and dependencies to enhance performance, allowing for O(1) query times. This is critical for maintaining speed in an air-gapped environment.</p>
<p><a href="https://mermaid.live/edit#pako:eNptkTtvhDAMx79K5PlQd4ZKPK6o0tEbaG8odDAXA5EgQXkM1em-e0NoBWrryf7b-cWPG1wVJ4ih1zgP7DVvJPNmXLsKb4b0Ki2W1Ofqwjha_NjEtK7Sc2m-FZL8F6KBROiowHkmzkohqRM08gY2QlY_y56MZbknP1zcKEljK0ZhBRnWaTWFPnZ_ZiyKHllenxRyJqRV4WmLhnZFm3esi9DKH7TS7MXPb3av8oA-_osJqae6oIViiZ0IOelWoeb78Vc3CdXZGqQ_ARxgIj2h4H7ptyXZgB1oogZi73Lq0I122c7dl6KzqvqUV4itdnQAN_vlUy7Qr3aCuMPReHVG-a7UFhMXVulyPWy47wG0cv2wYu5f4KWXlw" target="_blank" rel="noopener noreferrer"><img decoding="async" loading="lazy" src="https://mermaid.ink/img/pako:eNptkTtvhDAMx79K5PlQd4ZKPK6o0tEbaG8odDAXA5EgQXkM1em-e0NoBWrryf7b-cWPG1wVJ4ih1zgP7DVvJPNmXLsKb4b0Ki2W1Ofqwjha_NjEtK7Sc2m-FZL8F6KBROiowHkmzkohqRM08gY2QlY_y56MZbknP1zcKEljK0ZhBRnWaTWFPnZ_ZiyKHllenxRyJqRV4WmLhnZFm3esi9DKH7TS7MXPb3av8oA-_osJqae6oIViiZ0IOelWoeb78Vc3CdXZGqQ_ARxgIj2h4H7ptyXZgB1oogZi73Lq0I122c7dl6KzqvqUV4itdnQAN_vlUy7Qr3aCuMPReHVG-a7UFhMXVulyPWy47wG0cv2wYu5f4KWXlw?type=png" alt="" class="img_ev3q"></a></p>
<p>Minefield takes a user-centric approach to vulnerability ingestion, allowing users to process data without Minefield relying on external databases, much like how Git operates offline with local repositories.</p>
<p>Minefield's graphing capabilities are highly optimized for performance, ensuring it can quickly handle complex vulnerability data, even in an air-gapped setup. The data must conform to the OSV (Open Source Vulnerability) schema, a widely recognized standard that promotes consistency and reliability across different data sources.</p>
<p>Users can download vulnerability data from trusted sources like <code>osv.dev</code>—available as data dumps at <a href="https://google.github.io/osv.dev/data/#data-dumps" target="_blank" rel="noopener noreferrer">this link</a>—package it as a zip file, and provide it to Minefield.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="custom-vulnerability-ingestion">Custom Vulnerability Ingestion<a href="https://bitbom.dev/blog/Air-Gapped-Vulnerability/#custom-vulnerability-ingestion" class="hash-link" aria-label="Direct link to Custom Vulnerability Ingestion" title="Direct link to Custom Vulnerability Ingestion">​</a></h2>
<p>One of Minefield's standout features is its ability to ingest custom vulnerabilities. Users can include vulnerabilities that adhere to the OSV schema, even if they are not listed in public databases. This flexibility allows organizations to address specific security concerns and incorporate proprietary or newly discovered vulnerabilities into their assessments.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="advantages-of-an-air-gapped-approach">Advantages of an Air-Gapped Approach<a href="https://bitbom.dev/blog/Air-Gapped-Vulnerability/#advantages-of-an-air-gapped-approach" class="hash-link" aria-label="Direct link to Advantages of an Air-Gapped Approach" title="Direct link to Advantages of an Air-Gapped Approach">​</a></h2>
<p><strong>Enhanced Security</strong>: Running in an air-gapped environment significantly improves data security by preventing unauthorized access, data leaks, and dependence on external systems. This benefits organizations dealing with sensitive information or operating in highly regulated industries.</p>
<p><strong>Data Integrity and Control</strong>: Keeping data local provides users complete control over the accuracy and integrity of their vulnerability information, minimizing the risk of data tampering or corruption from third-party sources.</p>
<p><strong>Flexibility and Customization</strong>: Users can include custom vulnerabilities, even those unavailable in public databases. This is crucial for organizations that need to address unique security challenges or incorporate findings from internal security reviews.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="challenges-and-considerations">Challenges and Considerations<a href="https://bitbom.dev/blog/Air-Gapped-Vulnerability/#challenges-and-considerations" class="hash-link" aria-label="Direct link to Challenges and Considerations" title="Direct link to Challenges and Considerations">​</a></h2>
<p><strong>Manual Updates</strong>: A significant challenge of air-gapped systems is the need for manual updates. Users must periodically ingest new vulnerability data to keep their assessments up-to-date. Fortunately, many databases, including osv.dev, offer frequent updates, making it relatively easy to download and update information. Organizations should establish routines for downloading and ingesting the latest data to ensure their security assessments are always practical.</p>
<p><strong>User Responsibility</strong>: With great power comes great responsibility. Users must ensure that the data they provide is current and accurate. This requires a proactive approach to managing data and maintaining the integrity of the security assessment process.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="vulnerability-leaderboard-overview">Vulnerability Leaderboard Overview<a href="https://bitbom.dev/blog/Air-Gapped-Vulnerability/#vulnerability-leaderboard-overview" class="hash-link" aria-label="Direct link to Vulnerability Leaderboard Overview" title="Direct link to Vulnerability Leaderboard Overview">​</a></h2>
<p>An example is the leaderboard in Minefield, which displays libraries and their vulnerability information.</p>
<table><thead><tr><th>Package</th><th>Type</th><th>ID</th><th>Vulnerabilities</th></tr></thead><tbody><tr><td>pkg.com/google/cadvisor@</td><td>library</td><td>253</td><td>2</td></tr><tr><td>pkg/setuptools@65.5.1</td><td>library</td><td>211</td><td>1</td></tr><tr><td>pkg.com/google/agi@</td><td>library</td><td>192</td><td>1</td></tr><tr><td>pkg/github.com/opencontainers/runc@v1.1.13</td><td>library</td><td>327</td><td>1</td></tr><tr><td>pkg/github.com/docker/docker@v26.1.4%2Bincompatible</td><td>library</td><td>291</td><td>1</td></tr><tr><td>pkg/ajv@8.11.0</td><td>library</td><td>677</td><td>0</td></tr><tr><td>pkg/%40babel/helper-remap-async-to-generator@7.18.9</td><td>library</td><td>421</td><td>0</td></tr><tr><td>pkg/github.com/google/trillian@v1.6.0</td><td>library</td><td>1354</td><td>0</td></tr><tr><td>GO-2024-3110</td><td>vuln</td><td>1601</td><td>1</td></tr><tr><td>GO-2024-3005</td><td>vuln</td><td>1603</td><td>1</td></tr><tr><td>GHSA-cx63-2mw6-8hw5</td><td></td><td>vuln</td><td>1602</td></tr></tbody></table>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://bitbom.dev/blog/Air-Gapped-Vulnerability/#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>By focusing on an air-gapped design, Minefield offers Git-like control over vulnerability data, ensuring security while providing the flexibility to ingest various information. This approach empowers users to enhance their security posture and customize vulnerability management based on their unique needs.</p>
<p>With evolving security threats, Minefield offers a reliable solution for managing vulnerabilities in air-gapped environments. It's perfect for organizations needing strong security and complete data control.</p>
<p>To learn more about how we ingest vulnerabilities offline and to get a more hands-on experience, visit our <a href="https://github.com/bitbomdev/minefield" target="_blank" rel="noopener noreferrer">GitHub repository</a> to get started.</p>]]></content:encoded>
            <category>air-gapped</category>
            <category>vulnerabilities</category>
        </item>
        <item>
            <title><![CDATA[Why We Use Participle?]]></title>
            <link>https://bitbom.dev/blog/using-participle/</link>
            <guid>https://bitbom.dev/blog/using-participle/</guid>
            <pubDate>Thu, 12 Sep 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Learn why we chose Participle and Roaring Bitmaps over GraphQL for our project.]]></description>
            <content:encoded><![CDATA[<p><img decoding="async" loading="lazy" alt="caged-floating-island" src="https://bitbom.dev/assets/images/participle-graph-c9f9ed5fdf9f452f10e192fe9a0af796.png" width="1456" height="816" class="img_ev3q"></p>
<p>We chose Participle and Roaring Bitmaps over GraphQL. Here's why.</p>
<hr>
<p><strong>TLDR:</strong> We had to make a crucial decision when developing <strong>Minefield</strong>, our tool for analyzing Software Bill of Materials (SBOMs) and their dependency graphs. Initially, we considered using <strong>GraphQL</strong> to query the intricate relationships between dependencies, dependents, and other relationships. However, as we delved deeper, it became evident that GraphQL wasn’t the ideal solution for our requirements, which included efficient, expressive, and high-performance querying on large, complex datasets.
That’s when we opted to create a <strong>custom Domain-Specific Language (DSL)</strong> using <strong>Participle</strong>, a parsing library in Golang, and to enhance its performance, we backed it with <strong>Roaring Bitmaps</strong>.</p>
<p>In this article, we will explore the reasons behind this decision and explain how it can help you tackle complex querying problems in your projects.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-attraction-of-graphql">The Attraction of GraphQL:<a href="https://bitbom.dev/blog/using-participle/#the-attraction-of-graphql" class="hash-link" aria-label="Direct link to The Attraction of GraphQL:" title="Direct link to The Attraction of GraphQL:">​</a></h2>
<p>Our Initial Consideration is GraphQL, a formidable tool that offers flexibility, is driven by schemas, and is widely adopted in the development community. Initially, it appeared to be the perfect fit for querying Minefield’s dependency graphs.
It allowed us to:</p>
<ul>
<li><strong>Retrieve only the necessary data</strong>, thereby reducing over-fetching commonly found in REST APIs.</li>
<li><strong>Utilize a robust schema</strong>, which defines the structure of the data, making it simple to work with and validate queries.</li>
<li><strong>Leverage a vast ecosystem</strong> equipped with tools for clients, servers, and documentation.</li>
</ul>
<p>Nevertheless, as we started experimenting, we encountered critical obstacles that led us to reconsider using GraphQL as a solution for querying SBOMs.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-graphql-fell-short-for-complex-dependency-graphs">Why GraphQL Fell Short for Complex Dependency Graphs<a href="https://bitbom.dev/blog/using-participle/#why-graphql-fell-short-for-complex-dependency-graphs" class="hash-link" aria-label="Direct link to Why GraphQL Fell Short for Complex Dependency Graphs" title="Direct link to Why GraphQL Fell Short for Complex Dependency Graphs">​</a></h2>
<ol>
<li>
<p><strong>Nested Relationships are Cumbersome</strong><br>
<!-- -->Dependency graphs are often deeply nested. You have to track which packages a library depends on and the entire chain of dependencies that follow. Writing deeply nested queries in GraphQL quickly became unwieldy and hard to manage.</p>
</li>
<li>
<p><strong>Complex Set-Based Operations</strong><br>
<!-- -->GraphQL is great for fetching specific pieces of data, but it wasn't designed for complex set-based operations like intersections, unions, or complements. When dealing with millions of dependencies, performing these operations is crucial for answering questions like "Which dependencies are affected by this vulnerability but not by others?"</p>
</li>
<li>
<p><strong>Performance Bottlenecks</strong><br>
<!-- -->As the dataset grew, performance became a concern. Querying large, complex graphs using GraphQL created a lot of overhead that slowed execution, especially when we needed to perform set-based operations on large lists of dependencies and vulnerabilities.</p>
</li>
</ol>
<hr>
<p>We recognized the need for a tailored solution to query complex dependency graphs efficiently.</p>
<p>To address this, we developed a <strong>custom DSL</strong> using <strong>Participle</strong>, a Golang parsing library that enabled us to define our own query language grammar with ease.</p>
<p>Our DSL empowers us to construct potent, expressive queries that are simple to compose and execute efficiently.</p>
<p>For instance, consider this straightforward example: <code>dsl (dependencies library pkg:golang/net and not (dependents library pkg:golang/example)) </code>
This query identifies all libraries dependent on <code>golang/net</code> but not relied upon by <code>golang/example</code>.</p>
<p>Expressing such nuanced queries clearly in GraphQL was challenging, but our DSL effortlessly managed this task.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-participle">Why Participle?<a href="https://bitbom.dev/blog/using-participle/#why-participle" class="hash-link" aria-label="Direct link to Why Participle?" title="Direct link to Why Participle?">​</a></h3>
<ol>
<li>
<p><strong>Native to Go</strong><br>
<!-- -->We wanted something that felt natural for Go developers. We defined our query language with Participle using Go structs, making the DSL intuitive and type-safe.</p>
<p>Example grammar definition:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">type</span><span class="token plain"> Expression </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Left     Term   @@</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Operator </span><span class="token builtin" style="color:rgb(189, 147, 249)">string</span><span class="token plain"> @</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"and"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"or"</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"xor"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain">?</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    Right    </span><span class="token operator">*</span><span class="token plain">Expression @@?</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>
<p><strong>Strong Typing</strong><br>
<!-- -->Leveraging Go's type system allowed us to create a robust DSL that's easy to extend and maintain. Adding new query operators or types is as simple as defining new Go structs and adding them to the parser.</p>
</li>
<li>
<p><strong>Extensibility and Performance</strong><br>
<!-- -->Since we controlled the language's design, we could optimize it for exactly what we needed. With Participle, building a DSL that supports nested queries, conditional logic, and complex operations like set intersections was easy.</p>
</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="roaring-bitmaps-supercharging-query-performance">Roaring Bitmaps: Supercharging Query Performance<a href="https://bitbom.dev/blog/using-participle/#roaring-bitmaps-supercharging-query-performance" class="hash-link" aria-label="Direct link to Roaring Bitmaps: Supercharging Query Performance" title="Direct link to Roaring Bitmaps: Supercharging Query Performance">​</a></h2>
<p>Once Participle parses the queries, we apply them using Roaring Bitmaps, a data structure specifically designed for fast set operations. This was a key advantage over GraphQL, which doesn't natively support efficient set-based operations.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-roaring-bitmaps">Why Roaring Bitmaps?<a href="https://bitbom.dev/blog/using-participle/#why-roaring-bitmaps" class="hash-link" aria-label="Direct link to Why Roaring Bitmaps?" title="Direct link to Why Roaring Bitmaps?">​</a></h3>
<p>Roaring Bitmaps are perfect for <strong>large-scale datasets</strong> like dependency graphs. They allow us to perform operations like <strong>AND</strong>, <strong>OR</strong>, and <strong>XOR</strong> on massive lists of dependencies in milliseconds, without sacrificing memory efficiency.</p>
<p>Here's how we evaluate a parsed query using Roaring Bitmaps:</p>
<div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">func</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">evaluateExpression</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">expr </span><span class="token operator">*</span><span class="token plain">Expression</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain">roaring</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Bitmap </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    left </span><span class="token operator">:=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">evaluateTerm</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">expr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> expr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Operator </span><span class="token operator">==</span><span class="token plain"> </span><span class="token boolean">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> left</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    right </span><span class="token operator">:=</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">evaluateExpression</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">expr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">switch</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain">expr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">Operator </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"and"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> roaring</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">And</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"or"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> roaring</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Or</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"xor"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> roaring</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token function" style="color:rgb(80, 250, 123)">Xor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">left</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> right</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token boolean">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This allows us to calculate query results quickly and efficiently, even when dealing with millions of dependencies and vulnerabilities.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="real-world-use-case-vulnerability-analysis-at-scale">Real-World Use Case: Vulnerability Analysis at Scale<a href="https://bitbom.dev/blog/using-participle/#real-world-use-case-vulnerability-analysis-at-scale" class="hash-link" aria-label="Direct link to Real-World Use Case: Vulnerability Analysis at Scale" title="Direct link to Real-World Use Case: Vulnerability Analysis at Scale">​</a></h2>
<p>Here’s an example of a real-world query you can run in Minefield using our DSL:</p>
<div class="language-dsl codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dsl codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">(dependents vulns CVE-2023-12345 and not dependencies library pkg:golang/patchedlib)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This query finds all dependents affected by a vulnerability (<code>CVE-2023-12345</code>) that haven’t yet patched the issue by using a specific library (<code>golang/patchedlib</code>).</p>
<p>In a GraphQL world, expressing this kind of query would be cumbersome, and executing it would be slow due to the overhead of navigating through layers of nested data. With our custom DSL and Roaring Bitmaps, however, it runs quickly—even on large datasets.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-choosing-the-right-tool-for-the-job">Conclusion: Choosing the Right Tool for the Job<a href="https://bitbom.dev/blog/using-participle/#conclusion-choosing-the-right-tool-for-the-job" class="hash-link" aria-label="Direct link to Conclusion: Choosing the Right Tool for the Job" title="Direct link to Conclusion: Choosing the Right Tool for the Job">​</a></h2>
<p>GraphQL is an incredibly useful tool for many use cases, but it wasn’t the right fit for Minefield’s complex dependency graph queries. By using <strong>Participle</strong> to build a custom DSL and <strong>Roaring Bitmaps</strong> to optimize query performance, we created a solution that’s both <strong>expressive</strong> and <strong>blazingly fast</strong>.</p>
<p>The takeaway? Always choose the right tool for the problem you’re solving. When you need something more tailored, building a custom solution can save you a lot of headaches down the road—especially when working with large, complex datasets.</p>
<p>If you’re interested in digging deeper into how we built Minefield’s custom DSL or have your own experiences with dependency analysis, check out our <a href="https://github.com/bitbomdev/minefield" target="_blank" rel="noopener noreferrer">GitHub repository</a> and let us know what you think!</p>]]></content:encoded>
            <category>Participle</category>
            <category>Roaring Bitmaps</category>
            <category>GraphQL</category>
            <category>SBOM</category>
            <category>dependency graphs</category>
            <category>Minefield</category>
        </item>
    </channel>
</rss>